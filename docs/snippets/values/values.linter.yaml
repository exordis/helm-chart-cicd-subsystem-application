# global: 
#   product: Some Product
#   subsystem: cicd
#   environment: test

# application: sample
# applicationType: service
# instance: unittests


envs: 
  TEST: 123
  SUBSYSTEM: wrong-subsystem

# workload: deployment

#repository: 'some-subsystem-some-application'


# applicationContainer: 
#   image:
#     registry: registry.gitlab.com
#     repository: 'some-subsystem-some-application'
#     version: 0.0.0
#   spec: {}









   




# ingresses:
#   internal:
#     default_backend:
#       service: service-a #validate service + port exist
#       port: 80  #validate service + port exist
#     useTls: true
#     hosts:
#       - k3s.local
#     paths:
#       - path: /api/v3(/|$)(.*)
#         pathType: Prefix
#       - path: /
#         pathType: Prefix
#   public:          
#     type: public
#     default_backend:
#       service: service-b #validate service + port exist
#       port: 80
#     useRegex: true
#     rewriteTarget: /$2
#     proxyBuffering: false
#     proxyBodySize: 0
#     annotations:
#       aaa: '1'
#     hosts:
#       - service-api.exordis.com
#       - service-api2.exordis.com
#     paths:
#       - path: /public-api-one
#         pathType: Prefix
#         backend:
#           service: service-b
#           port: 80
#       - path: /public-api-two
#         pathType: Prefix
#     spec:
#       ingressClassName: nginx



#   foreign:
#     useTls: true
#     default_backend:
#       service: service-not-managed-with-chart
#       port: 80
#       foreign: true  
#     hosts:
#       - service-not-managed-with-chart.exordis.com
#     paths:
#       - path: /
#         pathType: ImplementationSpecific
        



initContainers:
  migration:
    image:
      repository: my-default-image
      version: 0.0.0
    #spec:
    #  imagePullPolicy: Always

sidecars:
  jsreport:
    image:
      repository: jsreport
      version: 0.0.0
    #spec:

#TODO: replace with dict name->spec
volumes:
  volume1:
    #spec:
    #type: emptyDir
    mounts: 
      applicationContainer: /some-data
      jsreport: /some-another-data-but-same-as-for-applicationContainer

pvcs:
  mypvc:
    size: 10Gi
    mounts: 
      applicationContainer: /pvc-data
    spec: 
      resources:
        requests:
          storage: 100Gi


dataFolders:
  content:
    "templates":
      spec:
        imagePullPolicy: Always
      image:
        # registry: "templates"
        version: 1.24.0-dev.5
        repository: "software-development/subsystems/some-subsystem/data-content-templates"
      sizeLimit: 200Mi
      mounts: #shouldn't be empty
        applicationContainer:
          "/data/templates/original": null #use key by default or /data/templates/original
          "/data/templates/generated": /data/templates/generated
        jsreport:
          "/data/templates/generated": /jsreport
        



        
