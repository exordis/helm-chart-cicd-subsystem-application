# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Entities/ConfigMaps
templates:
  - templates/configmaps.yaml
  - templates/deployment.yaml
values:
  - values.metadata.yaml
tests:
  - it: Should generate configMap from minimum data in values 
    template: templates/configmaps.yaml
    set:
      configMaps:
        config:
          data:
            key: "value" 
    documentSelector:
      path: metadata.name
      value: some-subsystem-some-application-config 
    asserts:
      - equal:
          path: data.key
          value: value
      - equal:
          path: metadata.namespace
          value: some-subsystem-test


  - it: Should generate configMap with provided namespace 
    template: templates/configmaps.yaml
    set:
      configMaps:
        config:
          namespace: some-namespace
          data:
            key: "value" 
    documentSelector:
      path: metadata.name
      value: some-subsystem-some-application-config
    asserts:
      - equal:
          path: metadata.namespace
          value: some-namespace


  - it: Should generate configMap from empty data
    template: templates/configmaps.yaml
    set:
      configMaps:
        config:
          namespace: mynamespace
          data: {}
    documentSelector:
      path: metadata.name
      value: some-subsystem-some-application-config 
    asserts:
      - lengthEqual:
          path: data
          count: 0


  - it: Should generate configMap from empty definition
    template: templates/configmaps.yaml
    set:
      configMaps:
        config:
    documentSelector:
      path: metadata.name
      value: some-subsystem-some-application-config 
    asserts:
      - lengthEqual:
          path: data
          count: 0


  - it: Should generate configMap reference in all deployment containers if configmap.containers is not defined
    template: templates/deployment.yaml
    set:
      workload: deployment
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
        init2: {}
      configMaps:
        config:
          value: 1
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - contains:
          path: spec.template.spec.containers[*].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - contains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - exists:
          path: spec.template.metadata.annotations["checksum/configMap.config"]
  

  - it: Should generate configMap reference only for containers listed by configmap.containers if defined
    template: templates/deployment.yaml
    set:
      workload: deployment
      sidecars: 
        sidecar1: {}
        sidecar2: {}
      initContainers: 
        init1: {}
        init2: {}
      configMaps:
        config:
          containers:
            - init1 
            - sidecar1 
          value: 1
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "some-subsystem-some-application-sidecar1")].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - notContains:
          path: spec.template.spec.containers[?(@.name != "some-subsystem-some-application-sidecar1")].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "some-subsystem-some-application-init1")].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - notContains:
          path: spec.template.spec.initContainers[?(@.name != "some-subsystem-some-application-init1")].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - exists:
          path: spec.template.metadata.annotations["checksum/configMap.config"]
  

  
  - it: Should not generate configMap reference in deployment configmap.containers does not list any of its containers
    template: templates/deployment.yaml
    set:
      workload: deployment
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
      configMaps:
        config:
          containers: 
            - non-deployment-container
          value: 1
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - notContains:
          path: spec.template.spec.containers[*].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - notContains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            configMapRef:
              name: some-subsystem-some-application-config
      - notExists:
          path: spec.template.metadata.annotations["checksum/configMap.config"]
