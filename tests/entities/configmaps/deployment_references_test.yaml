# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Entities/ConfigMaps - Deployment References
templates:
  - templates/deployment.yaml
values:
  - ../values.metadata.yaml
tests:
  - it: Should generate configMap reference in all containers if configmap.containers is not defined
    template: templates/deployment.yaml
    set:
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
        init2: {}
      configMaps:
        config:
          data:
            value: ""
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - contains:
          path: spec.template.spec.containers[*].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - contains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - exists:
          path: spec.template.metadata.annotations["checksum/configMap.config"]
  

  - it: Should generate configMap reference only for containers listed by configmap.containers if defined
    template: templates/deployment.yaml
    set:
      sidecars: 
        sidecar1: {}
        sidecar2: {}
      initContainers: 
        init1: {}
        init2: {}
      configMaps:
        config:
          containers:
            - init1 
            - sidecar1 
          data:
            value: ""
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "sidecar1")].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - notContains:
          path: spec.template.spec.containers[?(@.name != "sidecar1")].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "init1")].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - notContains:
          path: spec.template.spec.initContainers[?(@.name != "init1")].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - exists:
          path: spec.template.metadata.annotations["checksum/configMap.config"]
  

  
  - it: Should not generate configMap reference in deployment if  configmap.containers does not list any of its containers
    template: templates/deployment.yaml
    set:
      cronjobs:
        cleanup:
          schedule: 0 6 * * *
          containers:
            main: 
            secondary:       
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
      configMaps:
        config:
          containers: 
            - cronjobs.cleanup.main
          data:
            value: ""
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - notContains:
          path: spec.template.spec.containers[*].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - notContains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - notExists:
          path: spec.template.metadata.annotations["checksum/configMap.config"]



 
  - it: Should not generate configmap reference in deployment from different namespace
    template: templates/deployment.yaml
    set:
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
      
      configMaps:
        config:
          namespace: other-namespace
          data:
            value: "1"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - notContains:
          path: spec.template.spec.containers[*].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - notContains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            configMapRef:
              name: cicd-sample-unittests-config
      - notExists:
          path: spec.template.metadata.annotations["checksum/configMap.config"]




  