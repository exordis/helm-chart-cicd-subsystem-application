# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Entities/Secrets - References
templates:
  - templates/secrets.yaml
  - templates/deployment.yaml
values:
  - ../values.metadata.yaml
tests:
  - it: Should generate secret reference in all deployment containers if secret.containers is not defined
    template: templates/deployment.yaml
    set:
      workload: deployment
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
      secrets:
        password:
          stringData:
            value: "1"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - contains:
          path: spec.template.spec.containers[*].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - contains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - exists:
          path: spec.template.metadata.annotations["checksum/secret.password"]
  

  - it: Should generate secret reference only for containers listed by secret.containers if defined
    template: templates/deployment.yaml
    set:
      workload: deployment
      sidecars: 
        sidecar1: {}
        sidecar2: {}
      initContainers: 
        init1: {}
        init2: {}
      secrets:
        password:
          containers:
            - sidecar1 
            - init1 
          stringData:
            value: "1"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - notContains:
          path: spec.template.spec.containers[?(@.name != "sidecar1")].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - contains:
          path: spec.template.spec.containers[?(@.name == "sidecar1")].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - notContains:
          path: spec.template.spec.initContainers[?(@.name != "init1")].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "init1")].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - exists:
          path: spec.template.metadata.annotations["checksum/secret.password"]
  

  
  - it: Should not generate secret reference in main workload if secret.containers does not list any of its containers
    template: templates/deployment.yaml
    set:
      workload: deployment
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
      cronjobs:
        cleanup:
          schedule: 0 6 * * *
          containers:
            main: 
      secrets:
        password:
          containers: 
            - cronjobs.cleanup.main
          stringData:
            value: "1"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - notContains:
          path: spec.template.spec.containers[*].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - notContains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - notExists:
          path: spec.template.metadata.annotations["checksum/secret.password"]


  - it: Should not generate secret reference in deployment from different namespace
    template: templates/deployment.yaml
    set:
      workload: deployment
      sidecars: 
        sidecar1: {}
      initContainers: 
        init1: {}
      
      secrets:
        password:
          namespace: other-namespace
          stringData:
            value: "1"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - notContains:
          path: spec.template.spec.containers[*].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - notContains:
          path: spec.template.spec.initContainers[*].envFrom
          content:
            secretRef:
              name: some-subsystem-some-application-password
      - notExists:
          path: spec.template.metadata.annotations["checksum/secret.password"]



