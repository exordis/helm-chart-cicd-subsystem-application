# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Entities/Secrets
templates:
  - templates/secrets.yaml
values:
  - ../values.metadata.yaml
tests:
  - it: Should generate secret from minimum data in values 
    template: templates/secrets.yaml
    set:
      secrets:
        password:
          data:
            token: dGVzdA==
          stringData:
            key: "value" 
    documentSelector:
      path: metadata.name
      value: cicd-sample-unittests-password 
    asserts:
      - equal:
          path: stringData.key
          value: value
      - equal:
          path: data.token
          value: dGVzdA==
      - equal:
          path: metadata.namespace
          value: cicd-test
      - equal:
          path: type
          value: Opaque


  - it: Should generate secret with provided namespace 
    template: templates/secrets.yaml
    set:
      secrets:
        password:
          namespace: some-namespace
          stringData:
            key: "value" 
    documentSelector:
      path: metadata.name
      value: cicd-sample-unittests-password
    asserts:
      - equal:
          path: metadata.namespace
          value: some-namespace


  - it: Should generate secret from empty stringData
    template: templates/secrets.yaml
    set:
      secrets:
        password:
          namespace: mynamespace
    documentSelector:
      path: metadata.name
      value: cicd-sample-unittests-password 
    asserts:
      - lengthEqual:
          path: stringData
          count: 0


  - it: Should generate secret from empty definition
    template: templates/secrets.yaml
    set:
      secrets:
        password: 
    documentSelector:
      path: metadata.name
      value: cicd-sample-unittests-password 
    asserts:
      - lengthEqual:
          path: stringData
          count: 0
          
  - it: Should fail when referencing non existing container
    template: templates/secrets.yaml
    set:
      secrets:
        password:
          containers: 
            - missing
          stringData:
            key: "value" 
    asserts:
      - failedTemplate:
          errorPattern: "Secret 'password' references undefined container 'missing'"

  - it: Should fail if external secret id matches one of secret ids
    template: templates/secrets.yaml
    set:  
      secrets:
        password:
      externalSecrets:
        password:
    asserts:
      - failedTemplate:
          errorPattern: Can not register secret with id 'password'. externalSecrets  collection already has entity with the same id registered. 


  - it: Should fail when referencing non existing container from other namespace
    set:
      secrets:
        password:
          namespace: some-namespace
          containers: 
            - application
    asserts:
      - failedTemplate:
          errorPattern: Secret 'password' references container 'application' from namespace 'cicd-test' while belongs to 'some-namespace'          